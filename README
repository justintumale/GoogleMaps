# GoogleMaps
This program is a basic implementation of Google Maps that uses several techniques 
to find the shortest path from one vertex to another.  I am responsible for several 
classes in roadgraph package which represents vertices and edges in a map and
performs calculations to find the shortest path between two vertices: MapGraph.java, 
MapNode.java, and MapEdge.java.  Also, I am responsible for several classes in the
basicgraph package which is used to gain experience in using adjacency lists and
adjacency matrices for graph representations.

To run the code:
	1. Run MapApp.java in the application package.
	2. Select a map.  This can be done in two ways:
		A. Click the drop down menu on the upper right hand corner of the
		   GUI and select one of the given maps.  
		B. 
		    a. Create your own map by zooming into a location (make sure 
		       you zoom in close enough, otherwise the file will be too 
		       large).
		    b. Save the map.  Giving it a name on the bottom left hand
                      corner of the GUI. Then give the name a .map extension.
		       Finally click “Fetch Data”.
		    c. Refresh your data folder.
	3. Click “Show Intersections”.
	4. You will now see the intersections in the map. Select a starting
	   point by clicking one of the vertices in the GUI and then pressing
	   “Start”.
	5. Select a destination vertex by clicking one of the vertices and 
	   then pressing “Dest”.
	6. Choose an algorithm that you would like to use.
	7. Click “Show Route” to see the shortest path that the algorithm takes.
	8. Next, click “Start Visualization” to see how the algorithm selects
	   the vertices in the map.
	9. To use another algorithm, click “Hide Route” and repeat steps 4-8.

/-------------------------------------------------------------------------
/ Starter Code and GUI Application for Course 3 in the
/ Java Programming: Object Oriented Design of 
/ Data Structures Specialization:
/
/ Advanced Data Structures in Java
/ https://www.coursera.org/learn/advanced-data-structures
/
/ Authored by UCSD MOOC Team:
/ Mia Minnes, Christine Alvarado, Leo Porter, Alec Brickner
/ and Adam Setters
/
/ Date: 12/16/2015
/-------------------------------------------------------------------------

---------------------------------------------------------[ DESCRIPTION ]--

The files provided are skeleton code, as well as grading previews and 
testing files to be used in completing the course programming 
assignments. Additionally, you are provided a runnable JavaFX program 
which will help to test and demonstrate your implementations.

-------------------------------------------------------[ FILES BY WEEK ]--

Below are the files introduced in each week and used in each week
of the course. See file for description...

Week 1 : Introduction to the course and graphs
==============================================
basicgraph.Graph.java
basicgraph.GraphAdjList.java
basicgraph.GraphAdjMatrix.java

Week 2 : Class design and simple graph search
==================================================
roadgraph.MapGraph.java
week2example.Maze.java
week2example.MazeLoader.java
week2example.MazeNode.java

Utility files
=============
geography.GeographicPoint.java
geography.RoadSegment.java
util.GraphLoader.java

---------------------------------------------------------------[ SETUP ]-- 

Importing Project into eclipse:
	1. Create a new Java Project in your workspace
	2. Import the starter files:
	  File -> Import -> Select "File System" -> Next -> Browse and set 
	  root directory to folder contents of zip were extracted to -> Finish

Feel free to use another IDE or manually compile and run your programs.
If you need help, google is your friend.
